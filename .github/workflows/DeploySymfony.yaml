on:
  workflow_dispatch:
  push:
    branches: [ development, staging, beta ]
  pull_request:
    branches: [ development, staging, beta ]

jobs:
  deploy-to-aks:
    name: Deploy Symfony App to AKS with Branch ${{ github.ref_name }}
    runs-on: self-hosted
    permissions:
      contents: read
    env:
      APP: datawiz2
      GH_BRANCH: ${{ github.ref_name }}
      GH_SHA: ${{ github.sha }}
      NAMESPACE: ${{ github.ref_name }} #works with branch development, beta and staging, for main branch and production deployment it doesn't work
      REGISTRY: ${{ secrets.ACR_NAME }}.azurecr.io
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Construct image ref
        run: echo "IMAGE_REF=${REGISTRY}/${GITHUB_REPOSITORY,,}/${APP}:$(cat ${APP}/VERSION)" >> $GITHUB_ENV

      - name: Set up kubelogin for non-interactive login
        run: |
          curl -LO https://github.com/Azure/kubelogin/releases/download/v0.0.9/kubelogin-linux-amd64.zip
          sudo unzip -j kubelogin-linux-amd64.zip -d /usr/local/bin
          rm -f kubelogin-linux-amd64.zip
          kubelogin --version

      - name: Install Azure cli
        run: |
          sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install azure-cli

      - name: Azure Login (Development/Staging)
        if: ${{ github.ref_name }} != 'beta'
        uses: azure/login@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"

      - name: Azure Login (Beta)
        if: ${{ github.ref_name }} == 'beta'
        uses: azure/login@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS_BETA }}"

      - name: Connect to Azure Container Registry (ACR)
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Create SPSS-API image build and push to a Azure Container Registry (ACR)
        if: ${{ github.ref_name }} != 'beta'
        run: |
          docker build . -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.APP }}_spss:latest-${{ env.GH_BRANCH }}  --file .github/workflows/manifests/${{ env.GH_BRANCH }}/spss_api/Dockerfile
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.APP }}_spss:latest-${{ env.GH_BRANCH }}

      - name: Create PHP-FPM image build and push to a Azure Container Registry (ACR)
        if: ${{ github.ref_name }} != 'beta'
        run: |
          docker build . -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.APP }}_php_fpm:latest-${{ env.GH_BRANCH }}  --file .github/workflows/manifests/${{ env.GH_BRANCH }}/php/Dockerfile
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.APP }}_php_fpm:latest-${{ env.GH_BRANCH }}

      - name: Create NGINX image and push to a Azure Container Registry (ACR)
        if: ${{ github.ref_name }} != 'beta'
        run: |
          docker build . -t ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.APP }}_nginx:latest-${{ env.GH_BRANCH }}  --file .github/workflows/manifests/${{ env.GH_BRANCH }}/nginx/Dockerfile
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.APP }}_nginx:latest-${{ env.GH_BRANCH }}

      - name: Install kubectl
        run: |
          sudo apt-get update && sudo apt-get install -y apt-transport-https
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubectl

      - name: Set KUBECONFIG env variable
        run: echo "KUBECONFIG=${RUNNER_TEMP}/kubeconfig-$(date +%s)" >> $GITHUB_ENV

      - name: Set AKS cluster context
        run: |
          az aks get-credentials -n ${{ secrets.CLUSTER_RESOURCE_GROUP_NAME }} -g ${{ secrets.CLUSTER_NAME }} -f ${KUBECONFIG}
          kubelogin convert-kubeconfig -l azurecli  # this is required for me because of AAD and Azure RBAC integration

      - name: Delete old deployment on AKS if exists
        run: |
          kubectl delete --ignore-not-found -f .github/workflows/manifests/${{ env.GH_BRANCH }}/symfony.yaml --namespace=${{ env.NAMESPACE }}

      - name: Deploy new Symfony Application to AKS
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            .github/workflows/manifests/${{ env.GH_BRANCH }}/symfony.yaml
          namespace: ${{ env.NAMESPACE }}

      - name: Update existing deployment
        run: |
          kubectl rollout restart deployment ${{ env.APP }} --namespace=${{ env.NAMESPACE }}