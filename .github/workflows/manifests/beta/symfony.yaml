---
apiVersion: v1
kind: Service
metadata:
  name: datawiz2
  labels:
    app: datawiz2
spec:
  ports:
    - port: 80
  selector:
    app: datawiz2
---
apiVersion: v1
kind: Service
metadata:
  name: datawiz2-mysql
  labels:
    app: datawiz2
spec:
  ports:
    - port: 3306
  selector:
    app: datawiz2
    tier: mysql
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datawiz2-mysql
  labels:
    app: datawiz2
spec:
  selector:
    matchLabels:
      app: datawiz2
      tier: mysql
  replicas: 1 # tells deployment to run 1 pods matching the template
  revisionHistoryLimit: 0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: datawiz2
        tier: mysql
    spec:
      volumes:
        - name: datawiz2-persistent-dbs
          persistentVolumeClaim:
            claimName: datawiz2-pv-dbs-claim
      containers:
        - image: crzpiddev.azurecr.io/mariadb:10.7.1
          name: mysql
          resources:
            requests:
              memory: "256Mi"
              cpu: 100m
            limits:
              memory: "1Gi"
              cpu: "1"
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: datawiz2-beta
                  key: dbPassword
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: datawiz2-persistent-dbs
              mountPath: /var/lib/mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: datawiz2
spec:
  selector:
    matchLabels:
      app: datawiz2
  replicas: 1 # tells deployment to run 2 pods matching the template
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: datawiz2
        tier: frontend
    spec:
      volumes:
        - name: shared-files
          emptyDir: { }
        - name: datawiz2-persistent-storage
          persistentVolumeClaim:
            claimName: datawiz2-pv-files-claim
      containers:
        - name: php
          image: crzpiddev.azurecr.io/datawiz2_php_fpm:latest-staging
          resources:
            requests:
              memory: "128Mi"
              cpu: 100m
            limits:
              memory: "1Gi"
              cpu: "1"
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: datawiz2-beta
                  key: dbUrl
            - name: SPSS_API_URI
              valueFrom:
                secretKeyRef:
                  name: datawiz2-beta
                  key: spss-api
            - name: OAUTH_KEYCLOAK_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: datawiz2-beta
                  key: kcClient
            - name: OAUTH_KEYCLOAK_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: datawiz2-beta
                  key: kcSecret
            - name: OAUTH_KEYCLOAK_AUTH_SERVER_URL
              valueFrom:
                secretKeyRef:
                  name: datawiz2-beta
                  key: kcServer
            - name: OAUTH_KEYCLOAK_REALM
              valueFrom:
                secretKeyRef:
                  name: datawiz2-beta
                  key: kcRealm
          imagePullPolicy: Always
          volumeMounts:
            - name: shared-files
              mountPath: /var/www
            - name: datawiz2-persistent-storage
              mountPath: /var/www/var/uploads
          lifecycle:
            postStart:
              exec:
                command: [ "/bin/sh", "-c", "cp -r -p /build/. /var/www" ]
        - name: nginx
          image: crzpiddev.azurecr.io/datawiz2_nginx:latest-staging
          resources:
            requests:
              memory: "128Mi"
              cpu: 100m
            limits:
              memory: "512Mi"
              cpu: "1"
          imagePullPolicy: Always
          volumeMounts:
            - name: shared-files
              mountPath: /var/www
          ports:
            - containerPort: 80
        - name: spss
          image: crzpiddev.azurecr.io/datawiz2_spss:latest-staging
          resources:
            requests:
              memory: "128Mi"
              cpu: 100m
            limits:
              memory: "512Mi"
              cpu: "1"
          imagePullPolicy: Always
---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: datawiz2
#   annotations:
#     kubernetes.io/ingress.class: traefik # für public beta
#     traefik.ingress.kubernetes.io/router.entrypoints: websecure # für public beta
#     external-dns.alpha.kubernetes.io/hostname: datawiz2.beta.zpid.org
#     traefik.ingress.kubernetes.io/router.tls: "true" # für public beta
# spec:
#   tls:
#     - secretName: cert-betawildcard
#   rules:
#     - host: datawiz2.beta.zpid.org
#       http:
#         paths:
#           - path: /
#             backend:
#               service:
#                 name: datawiz2
#                 port:
#                   number: 80
#             pathType: Exact
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: datawiz2
  annotations:
    kubernetes.io/ingress.class: azure/application-gateway
    appgw.ingress.kubernetes.io/use-private-ip: "true"
    external-dns.alpha.kubernetes.io/hostname: datawiz2.stg.zpid.org
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/health-probe-status-codes: "200-599"
    appgw.ingress.kubernetes.io/health-probe-interval: "10"
    appgw.ingress.kubernetes.io/health-probe-timeout: "15"
    appgw.ingress.kubernetes.io/request-timeout: "100"
spec:
  tls:
    - secretName: cert-stgwildcard
  rules:
    - host: datawiz2.stg.zpid.org
      http:
        paths:
          - path: /
            backend:
              service:
                name: datawiz2
                port:
                  number: 80
            pathType: Exact
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datawiz2.mysql
  namespace: beta
spec:
  podSelector:
    matchLabels:
      app: datawiz2
      tier: mysql
  ingress:
    - ports:
        - port: 3306
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datawiz2.frontend
  namespace: beta
spec:
  podSelector:
    matchLabels:
      app: datawiz2
      tier: frontend
  ingress:
    - ports:
        - port: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: datawiz2-pv-files-claim
  labels:
    app: datawiz2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: datawiz2-pv-dbs-claim
  labels:
    app: datawiz2
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
