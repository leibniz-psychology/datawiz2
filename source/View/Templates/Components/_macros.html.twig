{% macro helpButton(formIdentifier) %}
    <button class="MetaData-HelpButton" type="button"
            @click="document.getElementById('{{ formIdentifier }}_details').toggleAttribute('open'); $store.app.{{ formIdentifier }}_details = document.getElementById('{{ formIdentifier }}_details').hasAttribute('open')"
            :class="$store.app.{{ formIdentifier }}_details && '!bg-zpid-blue'" x-data="{}">
        ?
    </button>
{% endmacro %}

{% macro sectionHelp(sectionIdentifier) %}
    <div class="w-full Help-Text Help-Text_section markdown">
        {{ source("Help/#{sectionIdentifier}/_section.md")|markdown_to_html }}
    </div>
{% endmacro %}

{% macro formHelp(sectionIdentifier, formIdentifier, helpTitle) %}
    <details class="w-full border last:rounded-b-lg Help-Text" id="{{ formIdentifier }}_details"
             @click="$nextTick(() => { $store.app.{{ formIdentifier }}_details = $el.open });" x-data="">
        <summary class="px-4 py-2 text-base cursor-pointer text-zpid-purple focus:ring-inset bg-mono-50">
            <span class="mr-2">{{ helpTitle|trans }}</span>
        </summary>
        <div class="pb-4 markdown Details-SlideOut">
            {{ source("Help/#{sectionIdentifier}/#{formIdentifier}.md")|markdown_to_html }}
        </div>
    </details>
{% endmacro %}

{% macro codebookHelp(helpID, title) %}
    <details class="w-full border last:rounded-b-lg Help-Text" id="{{ helpID }}_details"
             @click="$nextTick(() => { $store.codebook.{{ helpID }}_details = $el.open });">
        <summary class="px-4 py-2 text-base cursor-pointer text-zpid-purple focus:ring-inset bg-mono-50">
        <span class="flex items-center">
            {{ title }}
            </span>
        </summary>
        <div class="pb-4 markdown">
            {{ source("Help/codebook/#{helpID}.md")|markdown_to_html }}
        </div>
    </details>
{% endmacro %}

{% macro inputLabels(options) %}
    {% set defaults = {
        'addText':  'Add another',
        'placeHolder': '',
    } %}
    {% set options = defaults | merge(options) %}

    <div class="mt-1 mb-2"
         x-data="{ labels: {{ options.labels }}, placeHolder: '{{ options.placeHolder }}', type: '{{ options.type }}' }">
        <template x-for="(item, index) in {{ options.labels }}" :key="index">
            <div class="mt-0.5" x-ref="inputContainer">
                <div class="inline-flex items-center w-full">
                    <input class="w-[50%] p-1 bg-white border placeholder-mono-500" rows="1"
                           :class="`CodeInput_${type}_${index}`"
                           autocomplete="off" x-on:keydown.enter.prevent="
                            if (index === {{ options.labels }}.length - 1 && (type === 'missings' || document.querySelector(`.ValueInput_${type}_${index}`).value !== '') && $el.value !== '') {
                                {{ options.labels }}.push({name: '', label: ''});
                                $nextTick(() => {document.querySelector(`.CodeInput_${type}_${ {{ options.labels }}.length - 1}`).focus()});
                            }"
                           x-model="item.name">
                    <span class="mx-1">=</span>
                    <input class="w-full p-1 bg-white border placeholder-mono-500" rows="1"
                           :class="`ValueInput_${type}_${index}`"
                           autocomplete="off" placeholder="{{ options.placeHolder }}"
                           x-on:keydown.enter.prevent="
                            if (index === {{ options.labels }}.length - 1 && document.querySelector(`.CodeInput_${type}_${index}`).value !== '' && $el.value !== '') {
                                {{ options.labels }}.push({name: '', label: ''});
                                $nextTick(() => {document.querySelector(`.CodeInput_${type}_${ {{ options.labels }}.length - 1}`).focus()});
                            }"
                           x-model="item.label">
                    <button title="{{ 'generic.remove'|trans }}"
                            class="!rounded-l-none !py-1.5 Button Button_tertiary Button_tertiary_danger Button_fieldSize"
                            @click="if ({{ options.labels }}.length > 1) {{ options.labels }}.splice(index, 1); else if ({{ options.labels }}.length === 1) { {{ options.labels }}[index] = {name: '', label: ''} };">
                        <span class="iconify-inline" data-icon="mi:delete"></span>
                    </button>
                </div>
            </div>
        </template>
        <div class="mt-2">
            <button class="flex items-center Button Button_secondary Button_secondary_act Button_fieldSize"
                    @click="{{ options.labels }}.push({name: '', label: ''}); $nextTick(() => {document.querySelector(`.CodeInput_${type}_${ {{ options.labels }}.length - 1}`).focus()})">
                {# Icon: fluent:add-20-regular #}
                <svg class="mr-1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                     aria-hidden="true" role="img" width="1em" height="1em" preserveAspectRatio="xMidYMid meet"
                     viewBox="0 0 20 20">
                    <g fill="none">
                        <path d="M10 2.5a.5.5 0 0 0-1 0V9H2.5a.5.5 0 0 0 0 1H9v6.5a.5.5 0 0 0 1 0V10h6.5a.5.5 0 0 0 0-1H10V2.5z"
                              fill="currentColor"/>
                    </g>
                </svg>
                {{ options.addText }}</button>
        </div>
    </div>
{% endmacro %}

{% macro copyToVariables(propsToCopy) %}
    <div class="relative ml-1" x-data="copyValues()">
        <button @click="showCopyTo = !showCopyTo"
                class="flex items-center justify-center px-1 ml-1 bg-white border rounded-md hover:bg-mono-100">{{ "codebook.var-props.copy.to"|trans }}
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true"
                 focusable="false" width="1em" height="1em"
                 style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"
                 preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24">
                <path d="M5 8l7 8l7-8z" fill="#626262" fill-rule="evenodd"/>
            </svg>
        </button>
        <div class="absolute right-0 z-10 p-1 border shadow-xl bg-mono-300 w-36" x-show="showCopyTo" x-cloak
             @click.outside="clearCopyTo()">
            <div>
                {{ "codebook.var-props.copy.select-vars"|trans }}
            </div>
            <template x-for="(variable, variableIndex ) in $store.codebook.getVariables()" :key="variableIndex">
                <button
                        x-text="variable.id"
                        {% if propsToCopy == 'values' or propsToCopy == 'missings' %}
                            x-tooltip.html.theme.light-border="`
                    <span class='font-semibold'>${$store.codebook.getOriginalVariable(variable.id).name}</span>
                    <ul>${$store.codebook.getOriginalVariable(variable.id).{{ propsToCopy }}.map(item => {
                    if (item.name !== '') return '<li>' + item.name + ' = ' + item.label + '<li>'}).join('')
                    }
                    </ul>
                `"
                        {% elseif propsToCopy == 'measure' %}
                            x-tooltip.html.theme.light-border="`<span class='font-semibold'>${$store.codebook.getOriginalVariable(variable.id).name}</span>`"
                        {% endif %}
                        @click="markForCopy(variable);" class="w-1/5 hover:bg-mono-200"
                        :class="copyTo.some(item => item === variable.id) && 'bg-green-300'"></button>
            </template>
            <div class="flex justify-end">
                <button class="underline" @click="clearCopyTo()">{{ "generic.cancel"|trans }}</button>
                <button class="px-2 ml-2 border rounded bg-mono-50 hover:bg-mono-100"
                        @click="doCopyTo('{{ propsToCopy }}'); clearCopyTo()">{{ "generic.copy"|trans }}
                </button>
            </div>
        </div>
    </div>
{% endmacro %}

{% macro bytesToSize(bytes) %}
    {%- set kilobyte = 1024 -%}
    {%- set megabyte = kilobyte * 1024 -%}
    {%- set gigabyte = megabyte * 1024 -%}
    {%- set terabyte = gigabyte * 1024 -%}
    {% if bytes < kilobyte %}
        {{- bytes ~ ' B' -}}
    {% elseif bytes < megabyte %}
        {{- (bytes / kilobyte)|number_format(2, '.') ~ ' KiB' -}}
    {% elseif bytes < gigabyte %}
        {{- (bytes / megabyte)|number_format(2, '.') ~ ' MiB' -}}
    {% elseif bytes < terabyte %}
        {{- (bytes / gigabyte)|number_format(2, '.') ~ ' GiB' -}}
    {% else %}
        {{- (bytes / terabyte)|number_format(2, '.') ~ ' TiB' -}}
    {% endif %}
{% endmacro %}

{% macro editDescription(file, loopIndex, updateURL) %}
    <div class="mx-4" x-data="{...fileManagement()}" x-init="descriptionText = '{{ file.description }}'">
        <label class="inline-block font-semibold" for="file-desc-{{ loopIndex }}"
               x-show="showInput || descriptionText !== ''" x-cloak>{{ "generic.description"|trans }}</label>
        <button @click="showInput = true; focusInput('#file-desc-{{ loopIndex }}');" type="button"
                x-text="descriptionText === '' ? '{{ "title.dataset.description.add"|trans }}' : '{{ "title.dataset.description.edit"|trans }}'"
                x-show="!showInput" x-cloak class="Button Button_secondary Button_secondary_act Button_fieldSize">
            {% if file.description %}
                {{ "title.dataset.description.edit"|trans }}
            {% else %}
                {{ "title.dataset.description.add"|trans }}
            {% endif %}
        </button>
        <div x-show="!showInput && descriptionText !== ''" class="p-1 border rounded-sm bg-mono-200"
             x-text="descriptionText" x-cloak>{{ file.description }}</div>

        <div x-show="showInput" x-cloak>
            <textarea x-ref="descriptionInput" rows="3" id="file-desc-{{ loopIndex }}" name="file-desc-{{ loopIndex }}"
                      class="w-full file-desc-textarea">{{ file.description }}</textarea>
            <div class="">
                <button class="Button Button_secondary Button_secondary_act Button_fieldSize"
                        @click="saveDescription(`{{ updateURL }}`, $refs.descriptionInput.value); descriptionText = $refs.descriptionInput.value; showInput = false">{{ "generic.save-changes"|trans }}</button>
                <button class="Button Button_tertiary Button_tertiary_act Button_fieldSize"
                        @click="showInput = false">{{ "generic.cancel"|trans }}</button>
            </div>
        </div>
    </div>
{% endmacro %}

{% macro dropzoneTemplate() %}
<div class="dz-message " data-dz-message>
    <button class="inline-flex items-center Button Button_primary Button_primary_act Button_standalone" type="button">
        {# Icon: ic:outline-open-in-browser #}
        <span class="w-5 h-5 mr-2 iconify-inline" data-icon="ic:outline-drive-folder-upload"></span>
        {{ "title.dataset.upload.button"|trans }}
    </button>
    <span class="block mt-3">{{ "title.dataset.upload.dragDrop"|trans }}</span>
</div>
{% endmacro %}
