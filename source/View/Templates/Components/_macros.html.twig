{% macro helpButton(formIdentifier) %}
    <button class="MetaData-HelpButton" type="button"
            x-on:click="$store.app.helpSelected = $store.app.helpSelected === '{{ formIdentifier }}' ? null : '{{ formIdentifier }}'"
            x-data="{}">
        ?
    </button>
{% endmacro %}

{% macro sectionHelp(sectionIdentifier) %}
    <div class="Help-Text Help-Text_section">
        {{ source("Help/#{sectionIdentifier}/_section.md")|markdown_to_html }}
    </div>
{% endmacro %}

{% macro formHelp(sectionIdentifier, formIdentifier) %}
    <div class="relative Help-MetaData" x-data="{}">
        <button class="absolute px-1 py-1 border-none rounded-full shadow-none top-2 right-2 bg-mono-100 hover:bg-mono-300"
                x-on:click="$store.app.helpSelected = null"
                x-show="$store.app.helpSelected === '{{ formIdentifier }}'" x-cloak>
            <span class="w-6 h-6 iconify" data-icon="mdi:close" data-inline="false"></span>
        </button>
        <div class="Help-Text Help-Text_metaData" x-show="$store.app.helpSelected === '{{ formIdentifier }}'" x-cloak>
            {{ source("Help/#{sectionIdentifier}/#{formIdentifier}.md")|markdown_to_html }}
        </div>
    </div>
{% endmacro %}

{% macro codebookHelp(helpID, title) %}
    <div class="ml-4 mr-2 markdown">
        <h3>
            <a role="button" tabindex="0"
               @click="$store.codebookSettings.showHelp.{{ helpID }} = !$store.codebookSettings.showHelp.{{ helpID }}"
               class="underline">{{ title }}</a>
        </h3>
        <div x-show="$store.codebookSettings.showHelp.{{ helpID }}" x-cloak>
            {{ source("Help/codebook/#{helpID}.md")|markdown_to_html }}
        </div>
    </div>
{% endmacro %}

{#
Render wizard navigation bar with links that navigate to the previous/next form
group. Provide the form variable if you want a save button rendered that submits
the form.
#}
{% macro wizNav(options = {}, form) %}
    {% set defaults = {
        'prevUrl': '',
        'prevTitle': 'Previous',
        'nextUrl': '',
        'nextTitle': 'Next'
    } %}
    {% set options = defaults | merge(options) %}

    <div class="WizNavBar">
        {% if options.prevUrl != '' %}
            <a class="flex items-center self-center px-2 py-1 mt-2 underline justify-self-start"
               href="{{ options.prevUrl }}">
                <svg fill="none" viewbox="0 0 24 24" stroke="currentColor" class="arrow-left w-4 h-4 mr-1.5">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>{{ options.prevTitle }}
            </a>
        {% else %}
            {# empty span hack is needed so grid layout works #}
            <span></span>
        {% endif %}

        {% if form %}
            {{ form_widget(form.submit, {
                'label': 'Save',
                'attr': {
                    'class': 'MetaData-SubmitButton',
                }
            }) }}
        {% endif %}

        {# {% if options.nextUrl != '' %}
            <button class="flex items-center self-center px-2 py-1 mt-2 bg-white border rounded-md justify-self-end border-mono-400 hover:bg-mono-200" onclick="location.href='{{ options.nextUrl }}';" role="link" type="button">
                {{ options.nextTitle }}
                <svg fill="none" viewbox="0 0 24 24" stroke="currentColor" class="arrow-right w-4 h-4 ml-1.5">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                </svg>
            </button> #}
        {% if options.nextUrl != '' %}
            <a class="flex items-center self-center px-2 py-1 mt-2 underline justify-self-end "
               href="{{ options.nextUrl }}">
                {{ options.nextTitle }}
                <svg fill="none" viewbox="0 0 24 24" stroke="currentColor" class="arrow-right w-4 h-4 ml-1.5">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M14 5l7 7m0 0l-7 7m7-7H3"></path>
                </svg>
            </a>
        {% else %}
            {# empty span hack is needed so grid layout works #}
            <span></span>
        {% endif %}
    </div>
{% endmacro %}

{% macro inputLabels(options) %}
    {% set defaults = {
        'addText':  'Add another',
        'placeHolder': '',
    } %}
    {% set options = defaults | merge(options) %}

    <div class="mt-1 mb-2"
         x-data="{ labels: {{ options.labels }}, placeHolder: '{{ options.placeHolder }}', type: '{{ options.type }}' }">
        <template x-for="(item, index) in {{ options.labels }}" :key="index">
            <div class="mt-0.5" x-ref="inputContainer">
                <div class="inline-flex items-center w-full">
                    <input class="w-[50%] p-1 bg-white border placeholder-mono-500" rows="1"
                           :class="`CodeInput_${type}_${index}`"
                           autocomplete="off" x-on:keydown.enter.prevent="
                            if (index === {{ options.labels }}.length - 1 && (type === 'missings' || document.querySelector(`.ValueInput_${type}_${index}`).value !== '') && $el.value !== '') {
                                {{ options.labels }}.push({name: '', label: ''});
                                $nextTick(() => {document.querySelector(`.CodeInput_${type}_${ {{ options.labels }}.length - 1}`).focus()});
                            }"
                           x-model="item.name">
                    <span class="mx-1">=</span>
                    <input class="w-full p-1 bg-white border placeholder-mono-500" rows="1"
                           :class="`ValueInput_${type}_${index}`"
                           autocomplete="off" placeholder="{{ options.placeHolder }}"
                           x-on:keydown.enter.prevent="
                            if (index === {{ options.labels }}.length - 1 && document.querySelector(`.CodeInput_${type}_${index}`).value !== '' && $el.value !== '') {
                                {{ options.labels }}.push({name: '', label: ''});
                                $nextTick(() => {document.querySelector(`.CodeInput_${type}_${ {{ options.labels }}.length - 1}`).focus()});
                            }"
                           x-model="item.label">
                    <button title="Remove" class="h-full ml-1 hover:text-mono-500"
                            @click="if ({{ options.labels }}.length > 1) {{ options.labels }}.splice(index, 1); else if ({{ options.labels }}.length === 1) { {{ options.labels }}[index] = {name: '', label: ''} };">
                        {# <span class="iconify" data-icon="clarity:remove-solid" data-inline="false"></span> #}
                        <svg class="w-6 h-6" xmlns="http://www.w3.org/2000/svg"
                             xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" focusable="false" width="1em"
                             height="1em"
                             style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"
                             preserveaspectratio="xMidYMid meet" viewbox="0 0 36 36">
                            <path class="clr-i-solid clr-i-solid-path-1"
                                  d="M18 2a16 16 0 1 0 16 16A16 16 0 0 0 18 2zm8 22.1a1.4 1.4 0 0 1-2 2l-6-6l-6 6.02a1.4 1.4 0 1 1-2-2l6-6.04l-6.17-6.22a1.4 1.4 0 1 1 2-2L18 16.1l6.17-6.17a1.4 1.4 0 1 1 2 2L20 18.08z"
                                  fill="currentColor"/>
                        </svg>
                    </button>
                </div>
            </div>
        </template>
        <div class="mt-2">
            <button class="flex items-center"
                    @click="{{ options.labels }}.push({name: '', label: ''}); $nextTick(() => {document.querySelector(`.CodeInput_${type}_${ {{ options.labels }}.length - 1}`).focus()})">
                {# Icon: fluent:add-20-regular #}
                <svg class="mr-1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                     aria-hidden="true" role="img" width="1em" height="1em" preserveAspectRatio="xMidYMid meet"
                     viewBox="0 0 20 20">
                    <g fill="none">
                        <path d="M10 2.5a.5.5 0 0 0-1 0V9H2.5a.5.5 0 0 0 0 1H9v6.5a.5.5 0 0 0 1 0V10h6.5a.5.5 0 0 0 0-1H10V2.5z"
                              fill="currentColor"/>
                    </g>
                </svg>
                {{ options.addText }}</button>
        </div>
    </div>
{% endmacro %}

{% macro copyToVariables(propsToCopy) %}
    <div class="relative ml-1" x-data="copyValues()">
        <button @click="showCopyTo = !showCopyTo"
                class="flex items-center justify-center px-1 ml-1 bg-white border rounded-md hover:bg-mono-100">Copy to
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true"
                 focusable="false" width="1em" height="1em"
                 style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);"
                 preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24">
                <path d="M5 8l7 8l7-8z" fill="#626262" fill-rule="evenodd"/>
            </svg>
        </button>
        <div class="absolute right-0 z-10 p-1 border shadow-xl bg-mono-300 w-36" x-show="showCopyTo" x-cloak
             @click.outside="clearCopyTo()">
            <div>
                Select variables
            </div>
            <template x-for="(variable, variableIndex ) in $store.codebook.getVariables()" :key="variableIndex">
                <button
                        x-text="variable.id"
                        {% if propsToCopy == 'values' or propsToCopy == 'missings' %}
                            x-tooltip.html.theme.light-border="`
                    <span class='font-semibold'>${$store.codebook.getOriginalVariable(variable.id).name}</span>
                    <ul>${$store.codebook.getOriginalVariable(variable.id).{{ propsToCopy }}.map(item => {
                    if (item.name !== '') return '<li>' + item.name + ' = ' + item.label + '<li>'}).join('')
                    }
                    </ul>
                `"
                        {% elseif propsToCopy == 'measure' %}
                            x-tooltip.html.theme.light-border="`<span class='font-semibold'>${$store.codebook.getOriginalVariable(variable.id).name}</span>`"
                        {% endif %}
                        @click="markForCopy(variable);" class="w-1/5 hover:bg-mono-200"
                        :class="copyTo.some(item => item === variable.id) && 'bg-green-300'"></button>
            </template>
            <div class="flex justify-end">
                <button class="underline" @click="clearCopyTo()">Cancel</button>
                <button class="px-2 ml-2 border rounded bg-mono-50 hover:bg-mono-100"
                        @click="doCopyTo('{{ propsToCopy }}'); clearCopyTo()">Copy
                </button>
            </div>
        </div>
    </div>
{% endmacro %}

{% macro bytesToSize(bytes) %}
    {%- set kilobyte = 1024 -%}
    {%- set megabyte = kilobyte * 1024 -%}
    {%- set gigabyte = megabyte * 1024 -%}
    {%- set terabyte = gigabyte * 1024 -%}
    {% if bytes < kilobyte %}
        {{- bytes ~ ' B' -}}
    {% elseif bytes < megabyte %}
        {{- (bytes / kilobyte)|number_format(2, '.') ~ ' KiB' -}}
    {% elseif bytes < gigabyte %}
        {{- (bytes / megabyte)|number_format(2, '.') ~ ' MiB' -}}
    {% elseif bytes < terabyte %}
        {{- (bytes / gigabyte)|number_format(2, '.') ~ ' GiB' -}}
    {% else %}
        {{- (bytes / terabyte)|number_format(2, '.') ~ ' TiB' -}}
    {% endif %}
{% endmacro %}

{% macro editDescription(file, loopIndex, updateURL) %}
    <div class="mx-4" x-data="{...fileManagement()}" x-init="descriptionText = '{{ file.description }}'">
        <label class="inline-block font-semibold" for="file-desc-{{ loopIndex }}"
               x-show="showInput || descriptionText !== ''">{{ "generic.description"|trans }}</label>
        <button @click="showInput = true; focusInput('#file-desc-{{ loopIndex }}');" type="button"
                x-text="descriptionText === '' ? '{{ "title.dataset.description.add"|trans }}' : '{{ "title.dataset.description.edit"|trans }}'"
                x-show="!showInput" x-cloak>
            {% if file.description %}
                {{ "title.dataset.description.edit"|trans }}
            {% else %}
                {{ "title.dataset.description.add"|trans }}
            {% endif %}
        </button>
        <div x-show="!showInput && descriptionText !== ''" class="p-1 border rounded-sm bg-mono-200"
             x-text="descriptionText" x-cloak>{{ file.description }}</div>

        <div x-show="showInput" x-cloak>
            <textarea x-ref="descriptionInput" rows="3" id="file-desc-{{ loopIndex }}" name="file-desc-{{ loopIndex }}"
                      class="w-full file-desc-textarea">{{ file.description }}</textarea>
            <div class="">
                <button class="px-2 py-0.5 border rounded border-mono-300"
                        @click="saveDescription(`{{ updateURL }}`, $refs.descriptionInput.value); descriptionText = $refs.descriptionInput.value; showInput = false">{{ "generic.save-changes"|trans }}</button>
                <button class="px-2 py-0.5 border rounded border-mono-300"
                        @click="showInput = false">{{ "generic.cancel"|trans }}</button>
            </div>
        </div>
    </div>
{% endmacro %}
